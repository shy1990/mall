<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.sanji.mall.goods.dao.GoodsMapper">
	<resultMap id="BaseResultMap" type="com.sanji.mall.model.Goods">
		<result column="ID" jdbcType="VARCHAR" property="id" />
		<result column="NAME" jdbcType="VARCHAR" property="name" />
		<result column="GOODS_NUM" jdbcType="VARCHAR" property="goodsNum" />
		<result column="TYPE" jdbcType="VARCHAR" property="type" />
		<result column="DISABLED" jdbcType="VARCHAR" property="disabled" />
		<result column="CREATE_TIME" jdbcType="TIMESTAMP" property="createTime" />
		<result column="MODIFY_TIME" jdbcType="DATE" property="modifyTime" />
		<result column="USER_ID" jdbcType="VARCHAR" property="userId" />
		<result column="BRAND_ID" jdbcType="VARCHAR" property="brandId" />
		<result column="CAT_ID" jdbcType="VARCHAR" property="catId" />
		<result column="SCREEN_SIZE" jdbcType="DECIMAL" property="screenSize" />
		<result column="RESOLUTION" jdbcType="VARCHAR" property="resolution" />
		<result column="RAM" jdbcType="VARCHAR" property="ram" />
		<result column="CPU_NUMBER" jdbcType="VARCHAR" property="cpuNumber" />
		<result column="CPU_RATE" jdbcType="VARCHAR" property="cpuRate" />
		<result column="FRONT_CAMERA" jdbcType="VARCHAR" property="frontCamera" />
		<result column="POST_CAMERA" jdbcType="VARCHAR" property="postCamera" />
		<result column="TMALL_URL" jdbcType="VARCHAR" property="tmallUrl" />
		<result column="DEFAULT_IMG" jdbcType="VARCHAR" property="defaultImg" />
		<result column="EXPOSURE_DATE" jdbcType="DATE" property="exposureDate" />
		<result column="TOUCHSCREEN_TYPE" jdbcType="VARCHAR" property="touchscreenType" />
		<result column="SREEN_PIX_DENSITY" jdbcType="VARCHAR" property="sreenPixDensity" />
		<result column="SCREEN_TECHNOLOGY" jdbcType="VARCHAR" property="screenTechnology" />
		<result column="NARROW_FRAME" jdbcType="VARCHAR" property="narrowFrame" />
		<result column="SCREEN_RATIO" jdbcType="VARCHAR" property="screenRatio" />
		<result column="THEORY_RATE" jdbcType="VARCHAR" property="theoryRate" />
		<result column="WLAN_FUNCTION" jdbcType="VARCHAR" property="wlanFunction" />
		<result column="NAVIGATION" jdbcType="VARCHAR" property="navigation" />
		<result column="CONNECTION_SHARE" jdbcType="VARCHAR" property="connectionShare" />
		<result column="OPERATION_SYSTEM" jdbcType="VARCHAR" property="operationSystem" />
		<result column="MEMORY_CARD" jdbcType="VARCHAR" property="memoryCard" />
		<result column="BATTERY_TYPE" jdbcType="VARCHAR" property="batteryType" />
		<result column="BATTERY_CAPACITY" jdbcType="VARCHAR" property="batteryCapacity" />
		<result column="TALK_TIME" jdbcType="VARCHAR" property="talkTime" />
		<result column="USER_INTERFACE" jdbcType="VARCHAR" property="userInterface" />
		<result column="EXTENDED_CAPACITY" jdbcType="VARCHAR" property="extendedCapacity" />
		<result column="CAMERA" jdbcType="VARCHAR" property="camera" />
		<result column="CAMERA_TYPE" jdbcType="VARCHAR" property="cameraType" />
		<result column="CAMERA_CERTIFICATION" jdbcType="VARCHAR" property="cameraCertification" />
		<result column="SENSOR_TYPE" jdbcType="VARCHAR" property="sensorType" />
		<result column="FLASH_LAMP" jdbcType="VARCHAR" property="flashLamp" />
		<result column="VIDEO_SHOOT" jdbcType="VARCHAR" property="videoShoot" />
		<result column="SHOOT_FUNCTION" jdbcType="VARCHAR" property="shootFunction" />
		<result column="APERTURE" jdbcType="VARCHAR" property="aperture" />
		<result column="FOCAL_LENGTH" jdbcType="VARCHAR" property="focalLength" />
		<result column="CAMERA_FEATURES" jdbcType="VARCHAR" property="cameraFeatures" />
		<result column="CAMERA_OTHERPARAMS" jdbcType="VARCHAR"	property="cameraOtherparams" />
		<result column="MODEL_DESIGN" jdbcType="VARCHAR" property="modelDesign" />
		<result column="WEIGHT" jdbcType="DECIMAL" property="weight" />
		<result column="BODY_FEATURES" jdbcType="VARCHAR" property="bodyFeatures" />
		<result column="OPERATION_TYPE" jdbcType="VARCHAR" property="operationType" />
		<result column="OUT_SENSOR_TYPE" jdbcType="VARCHAR" property="outSensorType" />
		<result column="SIM_TYPE" jdbcType="VARCHAR" property="simType" />
		<result column="BODY_INTERFACE" jdbcType="VARCHAR" property="bodyInterface" />
		<result column="BODY_MATERIAL" jdbcType="VARCHAR" property="bodyMaterial" />
		<result column="AUDIO_SUPPORT" jdbcType="VARCHAR" property="audioSupport" />
		<result column="VIDEO_SUPPORT" jdbcType="VARCHAR" property="videoSupport" />
		<result column="IMG_SUPPORT" jdbcType="VARCHAR" property="imgSupport" />
		<result column="COMMON_FUNCTIONS" jdbcType="VARCHAR" property="commonFunctions" />
		<result column="BUSINESS_FUNCTIONS" jdbcType="VARCHAR"	property="businessFunctions" />
		<result column="OPTIONAL_ACCESSORY" jdbcType="VARCHAR"	property="optionalAccessory" />
		<result column="WARRANTY_POLICY" jdbcType="VARCHAR" property="warrantyPolicy" />
		<result column="WARRANTY_TIME" jdbcType="DECIMAL" property="warrantyTime" />
		<result column="WARRANTY_REMARK" jdbcType="VARCHAR" property="warrantyRemark" />
		<result column="SERVICE_PHONE" jdbcType="VARCHAR" property="servicePhone" />
		<result column="PHONE_REMARK" jdbcType="VARCHAR" property="phoneRemark" />
		<result column="DETAIL_CONTENTS" jdbcType="VARCHAR" property="detailContents" />
		<result column="CELLPHONE_TYPE" jdbcType="VARCHAR" property="cellphoneType" />
		<result column="CPU_MODEL" jdbcType="VARCHAR" property="cpuModel" />
		<result column="GPU_MODEL" jdbcType="VARCHAR" property="gpuModel" />
		<result column="THEORY_STANDBY_TIME" jdbcType="VARCHAR"	property="theoryStandbyTime" />
		<result column="CELLPHONE_SIZE" jdbcType="VARCHAR" property="cellphoneSize" />
		<result column="CLICK_RATE" jdbcType="VARCHAR" property="clickRate" />
		<result column="GOODS_DETAIL" jdbcType="CLOB" property="goodsDetail" />

		<result column="goods_collect_id" jdbcType="VARCHAR" property="collectId" />

       <!-- 后来追加用户活动商品可购买数量 -->
       <result column="canBuyNum" jdbcType="VARCHAR" property="canBuyNum" />
       <result column="shoppingRushStartTime" jdbcType="TIMESTAMP" property="shoppingRushStartTime" />
       <result column="shoppingRushEndTime" jdbcType="TIMESTAMP" property="shoppingRushEndTime" />
       
	</resultMap>

	<!-- 商品所有相关信息 property(需要映射到javaBean的属性名字) -->
	<resultMap type="com.sanji.mall.model.Goods" id="allGoodsInfoMap" extends="BaseResultMap">
		<!-- 商品单品信息 -->
		<collection property="goodsSkus" javaType="List" ofType="com.sanji.mall.model.GoodsSku">
			<id column="sku_id" property="id" jdbcType="VARCHAR" />
			<result column="sku_num" property="skuNum" jdbcType="VARCHAR" />
			<result column="sku_price" property="price" jdbcType="VARCHAR" />
			<result column="sku_original_price" property="originalPrice" jdbcType="NUMERIC" />
			<result column="sku_tmall_price" property="tmallPrice"	jdbcType="NUMERIC" />
			<result column="sku_edition" property="edition" jdbcType="NUMERIC" />
			<result column="sku_standard" property="standard" jdbcType="VARCHAR" />
			<result column="sku_color_id" property="colorId" jdbcType="VARCHAR" />
			<result column="sku_storage" property="storage" jdbcType="VARCHAR" />
			<result column="sku_stock" property="stock" jdbcType="NUMERIC" />
			<result column="sku_shelves" property="shelves" jdbcType="VARCHAR" />
			<result column="sku_networkThree" property="networkThree" jdbcType="VARCHAR" />
			<result column="sku_networkFour" property="networkFour"	jdbcType="VARCHAR" />
			<result column="sku_supportChannel" property="supportChannel" jdbcType="VARCHAR" />
			<result column="sku_netSuitType" property="netSuitType"	jdbcType="VARCHAR" />

			<result column="sku_collect_id" jdbcType="VARCHAR" property="collectId" />

			<!-- 追加字段，价格浮动相关 -->
			<result column="thenBuyNum" jdbcType="VARCHAR" property="thenBuyNum" />
			<result column="sku_changeNum" jdbcType="VARCHAR" property="changeNum" />
			<result column="sku_changePrice" jdbcType="VARCHAR" property="changePrice" />

			<!-- 商品图片信息 -->
			<collection property="goodsPics" javaType="List"
				ofType="com.sanji.mall.model.GoodsPic">
				<id column="pic_id" property="id" jdbcType="VARCHAR" />
				<result column="pic_src" property="picSrc" jdbcType="VARCHAR" />
				<result column="pic_standard_pic_src" property="standardPicSrc"	jdbcType="VARCHAR" />
				<result column="pic_thumb_pic_src" property="thumbPicSrc" jdbcType="VARCHAR" />
				<result column="pic_size" property="picSize" jdbcType="NUMERIC" />
				<result column="pic_width" property="width" jdbcType="NUMERIC" />
				<result column="pic_height" property="height" jdbcType="NUMERIC" />
			</collection>

			<!-- 单品颜色 -->
			<collection property="color" javaType="java.util.Map" ofType="com.sanji.mall.model.Color">
				<id column="cl_id" property="id" jdbcType="DECIMAL" />
				<result column="cl_color_name" property="colorName" jdbcType="VARCHAR" />
				<result column="cl_color_rgb" property="colorRgb" jdbcType="VARCHAR" />
			</collection>
		</collection>

		<!-- 商品标签信息 -->
		<collection property="labels" javaType="List" ofType="com.sanji.mall.model.Label">
			<id column="label_id" property="id" jdbcType="VARCHAR" />
			<result column="label_name" property="name" jdbcType="VARCHAR" />
			<result column="label_disabled" property="disabled" jdbcType="VARCHAR" />
			<result column="label_remark" property="remark" jdbcType="VARCHAR" />
		</collection>

		<!-- 商品品牌信息 -->
		<collection property="brand" javaType="com.sanji.mall.model.Brand"	ofType="com.sanji.mall.model.Brand">
			<id column="brand_id" property="id" jdbcType="VARCHAR" />
			<result column="brand_name" property="name" jdbcType="VARCHAR" />
			<result column="brand_pic" property="pic" jdbcType="VARCHAR" />
			<result column="brand_remark" property="remark" jdbcType="VARCHAR" />
			<result column="brand_ptree" property="ptree" jdbcType="BLOB" />
			<result column="brand_disabled" property="disabled" jdbcType="VARCHAR" />
			<result column="brand_p_order" property="pOrder" jdbcType="NUMERIC" />
			<result column="brand_grade" property="grade" jdbcType="NUMERIC" />
		</collection>

		<!-- 商品类别信息 -->
		<collection property="cat" javaType="com.sanji.mall.model.Cat"	ofType="com.sanji.mall.model.Cat">
			<id column="cat_id" property="id" jdbcType="VARCHAR" />
			<result column="cat_name" property="name" jdbcType="VARCHAR" />
			<result column="cat_pic" property="pic" jdbcType="VARCHAR" />
			<result column="cat_disabled" property="disabled" jdbcType="VARCHAR" />
			<result column="cat_remark" property="remark" jdbcType="VARCHAR" />
		</collection>

	</resultMap>

	<sql id="Base_Column_List">
		ID, NAME, GOODS_NUM, TYPE, DISABLED, CREATE_TIME,
		MODIFY_TIME, USER_ID,
		BRAND_ID, CAT_ID,
		SCREEN_SIZE, RESOLUTION, RAM,
		CPU_NUMBER, CPU_RATE, FRONT_CAMERA, POST_CAMERA,
		TMALL_URL
	</sql>

	<!-- 商品信息所有相关字段 -->
	<sql id="All_Column_List">
		g.ID, g.NAME, g.GOODS_NUM, g.TYPE, g.DISABLED,
		g.CREATE_TIME,	g.MODIFY_TIME, g.USER_ID, g.BRAND_ID, g.CAT_ID,
		g.SCREEN_SIZE, g.RESOLUTION, g.RAM, g.CPU_NUMBER,
		g.CPU_RATE,	g.FRONT_CAMERA,	g.POST_CAMERA, g.TMALL_URL, g.DEFAULT_IMG,
		g.EXPOSURE_DATE, g.TOUCHSCREEN_TYPE, g.SREEN_PIX_DENSITY,
		g.SCREEN_TECHNOLOGY, g.NARROW_FRAME, g.SCREEN_RATIO, g.THEORY_RATE,
		g.WLAN_FUNCTION, g.NAVIGATION, g.CONNECTION_SHARE, g.OPERATION_SYSTEM,
		g.MEMORY_CARD, g.BATTERY_TYPE, g.BATTERY_CAPACITY, g.TALK_TIME,
		g.USER_INTERFACE, g.EXTENDED_CAPACITY, g.CAMERA, g.CAMERA_TYPE,
		g.CAMERA_CERTIFICATION,	g.SENSOR_TYPE, g.FLASH_LAMP, g.VIDEO_SHOOT,
		g.SHOOT_FUNCTION, g.APERTURE, g.FOCAL_LENGTH, g.CAMERA_FEATURES,
		g.CAMERA_OTHERPARAMS, g.MODEL_DESIGN, g.WEIGHT, g.BODY_FEATURES,
		g.OPERATION_TYPE, g.OUT_SENSOR_TYPE, g.SIM_TYPE, g.BODY_INTERFACE,
		g.BODY_MATERIAL, g.AUDIO_SUPPORT, g.VIDEO_SUPPORT,
		g.IMG_SUPPORT, g.COMMON_FUNCTIONS, g.BUSINESS_FUNCTIONS, g.OPTIONAL_ACCESSORY,
		g.WARRANTY_POLICY, g.WARRANTY_TIME,	g.WARRANTY_REMARK, g.SERVICE_PHONE,
		g.PHONE_REMARK, g.DETAIL_CONTENTS, g.CELLPHONE_TYPE, g.CPU_MODEL,
		g.GPU_MODEL, g.THEORY_STANDBY_TIME, g.CELLPHONE_SIZE,
		g.CLICK_RATE,g.GOODS_DETAIL, s.ID sku_id, s.SKU_NUM sku_num, s.PRICE
		sku_price, s.ORIGINAL_PRICE	sku_original_price,	s.TMALL_PRICE
		sku_tmall_price, s.EDITION sku_edition, s.STANDARD sku_standard,
		s.COLOR_ID sku_color_id, s.STORAGE sku_storage, s.STOCK sku_stock,
		s.SHELVES sku_shelves, s.NETWORK_THREE sku_networkThree,
		s.NETWORK_FOUR sku_networkFour, s.SUPPORT_CHANNEL sku_supportChannel,
		s.NET_SUIT_TYPE	sku_netSuitType, s.CHANGE_NUM sku_changeNum,s.CHANGE_PRICE
		sku_changePrice, p.ID pic_id, p.PIC_SRC pic_src, p.STANDARD_PIC_SRC
		pic_standard_pic_src,p.THUMB_PIC_SRC pic_thumb_pic_src,	p.PIC_SIZE
		pic_size, p.WIDTH pic_width, p.HEIGHT pic_height,cl.ID cl_id,
		cl.COLOR_NAME cl_color_name, cl.COLOR_RGB cl_color_rgb,	l.Id label_id,
		l.NAME label_name, l.DISABLED label_disabled, l.REMARK label_remark,
		b.ID brand_id, b.NAME brand_name, b.PIC brand_pic, b.REMARK
		brand_remark, b.PTREE brand_ptree,
		b.DISABLED brand_disabled, b.P_ORDER
		brand_p_order, b.GRADE brand_grade,
		c.ID cat_id, c.NAME cat_name, c.PIC
		cat_pic, c.DISABLED cat_disabled,
		c.REMARK cat_remark
	</sql>
	
		<!-- 商品信息所有相关字段，第二次修改增加动态计算不同地域价格 -->
	<sql id="All_Column_List2">
		g.ID, g.NAME, g.GOODS_NUM, g.TYPE, g.DISABLED,
		g.CREATE_TIME,
		g.MODIFY_TIME, g.USER_ID,
		g.BRAND_ID, g.CAT_ID,
		g.SCREEN_SIZE, g.RESOLUTION, g.RAM, g.CPU_NUMBER,
		g.CPU_RATE,
		g.FRONT_CAMERA,
		g.POST_CAMERA, g.TMALL_URL, g.DEFAULT_IMG,
		g.EXPOSURE_DATE, g.TOUCHSCREEN_TYPE,
		g.SREEN_PIX_DENSITY,
		g.SCREEN_TECHNOLOGY, g.NARROW_FRAME, g.SCREEN_RATIO, g.THEORY_RATE,
		g.WLAN_FUNCTION,
		g.NAVIGATION,
		g.CONNECTION_SHARE, g.OPERATION_SYSTEM,
		g.MEMORY_CARD, g.BATTERY_TYPE,
		g.BATTERY_CAPACITY, g.TALK_TIME,
		g.USER_INTERFACE, g.EXTENDED_CAPACITY, g.CAMERA, g.CAMERA_TYPE,
		g.CAMERA_CERTIFICATION,
		g.SENSOR_TYPE,
		g.FLASH_LAMP, g.VIDEO_SHOOT,
		g.SHOOT_FUNCTION, g.APERTURE, g.FOCAL_LENGTH,
		g.CAMERA_FEATURES,
		g.CAMERA_OTHERPARAMS, g.MODEL_DESIGN, g.WEIGHT, g.BODY_FEATURES,
		g.OPERATION_TYPE,
		g.OUT_SENSOR_TYPE,
		g.SIM_TYPE, g.BODY_INTERFACE,
		g.BODY_MATERIAL, g.AUDIO_SUPPORT, g.VIDEO_SUPPORT,
		g.IMG_SUPPORT,
		g.COMMON_FUNCTIONS, g.BUSINESS_FUNCTIONS, g.OPTIONAL_ACCESSORY,
		g.WARRANTY_POLICY,
		g.WARRANTY_TIME,
		g.WARRANTY_REMARK, g.SERVICE_PHONE,
		g.PHONE_REMARK, g.DETAIL_CONTENTS, g.CELLPHONE_TYPE,
		g.CPU_MODEL,
		g.GPU_MODEL, g.THEORY_STANDBY_TIME, g.CELLPHONE_SIZE,
		g.CLICK_RATE,g.GOODS_DETAIL,
		s.ID sku_id, s.SKU_NUM sku_num, (s.PRICE+nvl(rp.float_price,0)) as 
		sku_price, s.ORIGINAL_PRICE
		sku_original_price,
		s.TMALL_PRICE
		sku_tmall_price, s.EDITION sku_edition, s.STANDARD sku_standard,
		s.COLOR_ID sku_color_id,
		s.STORAGE sku_storage, s.STOCK sku_stock,
		s.SHELVES sku_shelves,
		s.NETWORK_THREE sku_networkThree,
		s.NETWORK_FOUR
		sku_networkFour, s.SUPPORT_CHANNEL sku_supportChannel,
		s.NET_SUIT_TYPE
		sku_netSuitType,
		s.CHANGE_NUM sku_changeNum,s.CHANGE_PRICE
		sku_changePrice,
		p.ID pic_id, p.PIC_SRC pic_src, p.STANDARD_PIC_SRC
		pic_standard_pic_src,
		p.THUMB_PIC_SRC pic_thumb_pic_src,
		p.PIC_SIZE
		pic_size, p.WIDTH pic_width, p.HEIGHT pic_height,
		cl.ID cl_id,
		cl.COLOR_NAME cl_color_name, cl.COLOR_RGB cl_color_rgb,
		l.Id label_id,
		l.NAME label_name, l.DISABLED label_disabled, l.REMARK
		label_remark,
		b.ID brand_id, b.NAME brand_name, b.PIC brand_pic, b.REMARK
		brand_remark,
		b.PTREE brand_ptree,
		b.DISABLED brand_disabled, b.P_ORDER
		brand_p_order, b.GRADE brand_grade,
		c.ID cat_id, c.NAME cat_name, c.PIC
		cat_pic, c.DISABLED cat_disabled,
		c.REMARK cat_remark
	</sql>  
	
	<select id="gainNameBylike" resultType="java.util.Map" parameterType="java.lang.String">
		select name from SJ_TB_GOODS g where lower(g.name) like '%${s}%'
	</select> 

	<select id="selectBjd" resultType="java.util.Map">
		select distinct t1.goods_num, t1.goods_name,
		t1.price,t1.is_new,	t1.sale_index,	t1.IS_QUOTATION_HOT,case
		when t1.collected is null then	'false'	else 'true'
		end collected
		from
		(select t.goods_num,
		t.goods_name,
		min(t.price) over(partition by
		t.goods_num) price,
		t.is_new,
		t.IS_QUOTATION_HOT,
		dense_rank()
		over(partition by t.brand_id order by t.sale_num desc) sale_index,
		max(collect_id) over(partition by goods_num) collected
		from (select
		distinct g.goods_num,
		g.name goods_name,
		g.IS_QUOTATION_HOT,
		sku.price+nvl(p.float_price,0) price,
		sku.shelves,
		case
		when
		ROUND(TO_NUMBER(Sysdate - g.create_time)) &lt;= 7 then
		'true'
		else
		'false'
		end is_new,
		sum(nvl(oi.nums, 0)) over(partition by g.goods_num)
		sale_num,
		b.id brand_id,
		c.id collect_id,mgs.id
		from sj_tb_goods g
		join
		sj_tb_goods_sku sku on sku.goods_id = g.id
		join sj_tb_brand b on b.id
		=g.brand_id and b.name = #{brandName,jdbcType=VARCHAR}
		left join
		sj_tb_order_items oi on oi.target_id = sku.id
		left join sj_tb_order o
		on o.id = oi.order_id
		left join sj_tb_collect c on c.target_id = sku.id
		and c.member_id = #{userId,jdbcType=VARCHAR}
		left join
		sj_tb_members_goods_show mgs on mgs.sku_id=sku.id and
		mgs.members_id=#{userId,jdbcType=VARCHAR} and mgs.disabled='false'
		<!-- left join sj_tb_sku_regions_price p on p.goods_sku_id=sku.id and -->
		left join sj_tb_sku_member_price p on p.goods_sku_id=sku.id and
		p.disabled='false' and p.MEMBER_ID = #{userId,jdbcType=VARCHAR}
		where sku.shelves = 'true' 
		and NOT EXISTs (select * from SJ_TB_SHOPPING_RUSH sr where g.id=sr.GOODS_ID )
		and
		sku.machine_type like '%'||#{machineType,jdbcType=VARCHAR}||'%'  and mgs.id is
		null
		) t
		) t1
		order by t1.price
	</select>
	
	<select id="selectByPrimaryKey" resultMap="BaseResultMap"
		parameterType="java.lang.String">
		select
		<include refid="Base_Column_List" />
		from SJ_TB_GOODS where "ID" = #{id,jdbcType=VARCHAR}
	</select>

	<!-- 根据商品编号获得商品所有相关信息 -->
	<select id="gainAllGoodsInfoByGoodsNum" resultMap="allGoodsInfoMap"
		parameterType="java.lang.String">
		select
		<include refid="All_Column_List" />
		from SJ_TB_GOODS g
		left join SJ_TB_GOODS_SKU s on g.ID=s.GOODS_ID
		left
		join SJ_TB_GOODS_PIC p on s.ID=p.SKU_ID
		left join SJ_TB_COLOR cl on
		s.color_id = cl.id
		left join SJ_TB_GOODS_LABEL gl on g.ID=gl.GOODS_ID
		left join SJ_TB_LABEL l on gl.LABEL_ID=l.ID
		left join SJ_TB_BRAND b on
		g.BRAND_ID=b.ID
		left join SJ_TB_CAT c on g.CAT_ID=c.ID
		<if test="_parameter != null">
			where g.GOODS_NUM = #{goodsNum,jdbcType=VARCHAR}
		</if>
	</select>

	<!-- 用户登录状态下传入用户id和商品编号。查询商品所有相关信息，可查询是否已收藏 -->
	<select id="gainAllGoodsInfoByMap" resultMap="allGoodsInfoMap"
		parameterType="java.util.Map">
		select
		<if test="memberId != null and memberId!=''">
			(select id from SJ_TB_COLLECT where MEMBER_ID =
			#{memberId,jdbcType=VARCHAR} and TARGET_ID = g.id
			and TYPE = 'goods')
			as goods_collect_id ,
			(select id from SJ_TB_COLLECT where MEMBER_ID =
			#{memberId,jdbcType=VARCHAR}
			and TARGET_ID = sku_id
			and TYPE = 'sku')
			as sku_collect_id ,

			(select sum(col) from(
			select sum(oi.nums) as col
			from sj_tb_order_items oi left join sj_tb_order
			o on oi.order_id=o.id
			where trunc(o.createtime)=trunc(sysdate) and
			o.member_id=#{memberId,jdbcType=VARCHAR} and oi.target_type='sku' and
			oi.target_id in(
			select gsk.id from Sj_Tb_Goods_Sku gsk join
			sj_tb_goods gs on
			gsk.goods_id=gs.id where gs.GOODS_NUM =
			#{goodsNum,jdbcType=VARCHAR}
			) union all
			select sum(cart.order_num) as
			col from sj_tb_cart cart where
			trunc(cart.CREATE_TIME)=trunc(sysdate)
			and
			cart.member_id=#{memberId,jdbcType=VARCHAR} and cart.type='手机' and
			cart.target_id in(
			select gsk.id from Sj_Tb_Goods_Sku gsk join
			sj_tb_goods gs on
			gsk.goods_id=gs.id where gs.GOODS_NUM =
			#{goodsNum,jdbcType=VARCHAR}
			)
			))as thenBuyNum,
			<!-- (select sum(col) from( select sum(oi.nums) as col from sj_tb_order_items 
				oi left join sj_tb_order o on oi.order_id=o.id where trunc(o.createtime)=trunc(sysdate) 
				and o.member_id=#{memberId,jdbcType=VARCHAR} and oi.target_type='sku' and 
				oi.target_id=(select id from SJ_TB_GOODS gs where gs.GOODS_NUM = #{goodsNum,jdbcType=VARCHAR}) 
				union all select sum(cart.order_num) as col from sj_tb_cart cart where trunc(cart.CREATE_TIME)=trunc(sysdate) 
				and cart.member_id=#{memberId,jdbcType=VARCHAR} and cart.type='手机' and cart.target_id=(select 
				id from SJ_TB_GOODS gs where gs.GOODS_NUM = #{goodsNum,jdbcType=VARCHAR})) 
				)as thenBuyNum, -->
		</if>
		<include refid="All_Column_List" />

		from SJ_TB_GOODS g
		left join SJ_TB_GOODS_SKU s on g.ID=s.GOODS_ID
		left
		join SJ_TB_GOODS_PIC p on s.ID=p.SKU_ID
		left join SJ_TB_COLOR cl on
		s.color_id = cl.id
		left join SJ_TB_GOODS_LABEL gl on g.ID=gl.GOODS_ID
		left join SJ_TB_LABEL l on gl.LABEL_ID=l.ID
		left join SJ_TB_BRAND b on
		g.BRAND_ID=b.ID
		left join SJ_TB_CAT c on g.CAT_ID=c.ID
		<if test="_parameter != null">
			where g.GOODS_NUM = #{goodsNum,jdbcType=VARCHAR} and
			g.DISABLED='false'
			and s.SHELVES = 'true'
		</if>
	</select>
	
	<!-- 查询商品所有相关信息，是否已收藏,是否可见，所在区域价格浮动 -->
	<select id="gainAllGoodsInfo2" resultMap="allGoodsInfoMap"	parameterType="java.lang.String">
		select
		(select id from SJ_TB_COLLECT where MEMBER_ID =	#{memberId,jdbcType=VARCHAR} 
			and TARGET_ID = g.id and TYPE = 'goods') as goods_collect_id ,
		(select id from SJ_TB_COLLECT where MEMBER_ID =	#{memberId,jdbcType=VARCHAR}
			and TARGET_ID = sku_id and TYPE = 'sku') as sku_collect_id ,
		(select sum(col) from(select sum(oi.nums) as col from sj_tb_order_items oi left join 
			sj_tb_order	o on oi.order_id=o.id where trunc(o.createtime)=trunc(sysdate) 
			and	o.member_id=#{memberId,jdbcType=VARCHAR} and oi.target_type='sku' and
			oi.target_id in(select gsk.id from Sj_Tb_Goods_Sku gsk join	sj_tb_goods gs on
			gsk.goods_id=gs.id where gs.GOODS_NUM =	#{goodsNum,jdbcType=VARCHAR}) union all
			select sum(cart.order_num) as col from sj_tb_cart cart where trunc(cart.CREATE_TIME)=trunc(sysdate)
			and	cart.member_id=#{memberId,jdbcType=VARCHAR} and cart.type='手机' and
			cart.target_id in(select gsk.id from Sj_Tb_Goods_Sku gsk join sj_tb_goods gs on
			gsk.goods_id=gs.id where gs.GOODS_NUM =	#{goodsNum,jdbcType=VARCHAR})
		))as thenBuyNum,
		<include refid="All_Column_List2" />
		from SJ_TB_GOODS g
		left join SJ_TB_GOODS_SKU s on g.ID=s.GOODS_ID
		left join SJ_TB_GOODS_PIC p on s.ID=p.SKU_ID
		left join SJ_TB_COLOR cl on	s.color_id = cl.id
		left join SJ_TB_GOODS_LABEL gl on g.ID=gl.GOODS_ID
		left join SJ_TB_LABEL l on gl.LABEL_ID=l.ID
		left join SJ_TB_BRAND b on g.BRAND_ID=b.ID
		left join SJ_TB_CAT c on g.CAT_ID=c.ID
		<!-- left join sj_tb_sku_regions_price rp on s.id=rp.goods_sku_id and rp.regions_id=#{area,jdbcType=VARCHAR} and rp.disabled='false' -->
		left join sj_tb_sku_member_price rp on rp.goods_sku_id=s.id and	rp.disabled='false' and rp.MEMBER_ID = #{memberId,jdbcType=VARCHAR} 
		where 
			s.id not in(select mgs.sku_id from sj_tb_members_goods_show mgs where mgs.sku_id=s.id and mgs.members_id=#{memberId,jdbcType=VARCHAR} and mgs.disabled='false')
			and NOT EXISTs (select * from SJ_TB_SHOPPING_RUSH sr where g.id=sr.GOODS_ID )
			and g.GOODS_NUM = #{goodsNum,jdbcType=VARCHAR} 
			and	g.DISABLED='false'
			and s.SHELVES = 'true'
			 
	</select>
	
	<!-- 查询是否有对此用户的热销商品 -->
    <select id="gainAllShoppingRush" resultMap="allGoodsInfoMap"  parameterType="java.lang.String">
        select
        (select id from SJ_TB_COLLECT where MEMBER_ID = #{memberId,jdbcType=VARCHAR} 
            and TARGET_ID = g.id and TYPE = 'goods') as goods_collect_id ,
        (select id from SJ_TB_COLLECT where MEMBER_ID = #{memberId,jdbcType=VARCHAR}
            and TARGET_ID = sku_id and TYPE = 'sku') as sku_collect_id ,
        (select sum(col) from(select sum(oi.nums) as col from sj_tb_order_items oi left join 
            sj_tb_order o on oi.order_id=o.id where trunc(o.createtime)=trunc(sysdate) 
            and o.member_id=#{memberId,jdbcType=VARCHAR} and oi.target_type='sku' and
            oi.target_id in(select gsk.id from Sj_Tb_Goods_Sku gsk join sj_tb_goods gs on
            gsk.goods_id=gs.id) union all
            select sum(cart.order_num) as col from sj_tb_cart cart where trunc(cart.CREATE_TIME)=trunc(sysdate)
            and cart.member_id=#{memberId,jdbcType=VARCHAR} and cart.type='手机' and
            cart.target_id in(select gsk.id from Sj_Tb_Goods_Sku gsk join sj_tb_goods gs on
            gsk.goods_id=gs.id)
        ))as thenBuyNum,spr.BUY_NUM canBuyNum,
        spr.start_time shoppingRushStartTime,spr.end_time shoppingRushEndTime,
        <include refid="All_Column_List2" />
        from SJ_TB_GOODS g
        left join SJ_TB_GOODS_SKU s on g.ID=s.GOODS_ID 
        left join SJ_TB_GOODS_PIC p on s.ID=p.SKU_ID   
        left join SJ_TB_COLOR cl on s.color_id = cl.id
        left join SJ_TB_GOODS_LABEL gl on g.ID=gl.GOODS_ID
        left join SJ_TB_LABEL l on gl.LABEL_ID=l.ID
        left join SJ_TB_BRAND b on g.BRAND_ID=b.ID
        left join SJ_TB_CAT c on g.CAT_ID=c.ID
        right join SJ_TB_SHOPPING_RUSH spr on g.id=spr.GOODS_ID  AND spr .USER_NAME= #{userName,jdbcType=VARCHAR}  AND spr.disabled  ='false' and trunc(spr.end_TIME)&gt;=trunc(sysdate)
        left join sj_tb_sku_member_price rp on rp.goods_sku_id=s.id and rp.disabled='false' and rp.MEMBER_ID = #{memberId,jdbcType=VARCHAR}
        where 
            s.id not in(select mgs.sku_id from sj_tb_members_goods_show mgs where mgs.sku_id=s.id and mgs.members_id=#{memberId,jdbcType=VARCHAR} and mgs.disabled='false')
            <!-- and EXISTs (select * from SJ_TB_SHOPPING_RUSH sr where g.id=sr.GOODS_ID and sr
		.USER_NAME= #{userName,jdbcType=VARCHAR}  and sr.disabled ='false' ) -->
            and g.DISABLED='false'
            and s.SHELVES = 'true'
		order by spr.start_time asc
    </select>


	<!-- 更新商品点击数 -->
	<update id="upClickRate" parameterType="java.lang.String">
		<if test="_parameter != null">
			update sj_tb_goods set click_rate=click_rate+1 where
			GOODS_NUM =
			#{goodsNum,jdbcType=VARCHAR}
		</if>
	</update>



	<resultMap id="gainByPageResultMap" type="com.sanji.mall.model.Goods">
		<result column="ID" jdbcType="VARCHAR" property="id" />
		<result column="NAME" jdbcType="VARCHAR" property="name" />
		<result column="GOODS_NUM" jdbcType="VARCHAR" property="goodsNum" />
		<result column="DEFAULT_IMG" jdbcType="VARCHAR" property="defaultImg" />
		<result column="price" jdbcType="VARCHAR" property="price" />
		<result column="stock" jdbcType="NUMERIC" property="stock" />
		<result column="spec_code" jdbcType="VARCHAR" property="specCode" />

		<!-- 商品单品信息 -->
		<collection property="goodsSkus" javaType="List"
			ofType="com.sanji.mall.model.GoodsSku">
			<id column="sku_id" property="id" jdbcType="VARCHAR" />
			<result column="sku_price" property="price" jdbcType="VARCHAR" />
			<result column="sku_edition" property="edition" jdbcType="NUMERIC" />
			<result column="sku_standard" property="standard" jdbcType="VARCHAR" />
			<result column="sku_stock" property="stock" jdbcType="NUMERIC" />
			<result column="sku_support_channel" property="supportChannel"
				jdbcType="VARCHAR" />
			<result column="sku_net_suit_type" property="netSuitType"
				jdbcType="VARCHAR" />
			<!-- 单品颜色 -->
			<collection property="color" javaType="java.util.Map"
				ofType="com.sanji.mall.model.Color">
				<result column="cl_color_name" property="colorName" jdbcType="VARCHAR" />
			</collection>
		</collection>
		<!-- 商品品牌信息 -->
		<collection property="brand" javaType="com.sanji.mall.model.Brand"
			ofType="com.sanji.mall.model.Brand">
			<result column="brand_name" property="name" jdbcType="VARCHAR" />
		</collection>
		<!-- 商品类别信息 -->
		<collection property="cat" javaType="com.sanji.mall.model.Cat"
			ofType="com.sanji.mall.model.Cat">
			<result column="cat_name" property="name" jdbcType="VARCHAR" />
		</collection>
	</resultMap>

	<!-- 单品相关信息查询字段 -->
	<sql id="gainByPage_Column_Related_List">
		g.id,g.name,g.goods_num,g.default_img,
		s.id sku_id,(s.PRICE+nvl(rp.float_price,0)) as sku_price ,
		s.edition sku_edition,s.standard sku_standard,
		s.stock	sku_stock,s.support_channel sku_support_channel,
		s.net_suit_type	sku_net_suit_type,
		cl.color_name cl_color_name, b.name
		brand_name,c.name cat_name
	</sql>

	<!-- 单品相关信息查询字段 -->
	<sql id="gainByPage_Column_Related_List_pageRow">
		id,name,goods_num,default_img,sku_id,sku_price,
		sku_edition, sku_standard, sku_stock, sku_support_channel,
		sku_net_suit_type, cl_color_name, brand_name, cat_name
	</sql>

	<!-- 有条件的分页查找商品列表信息 -->
	<select id="gainByPage" parameterType="java.util.Map" resultMap="gainByPageResultMap">
		<!-- select <include refid="gainByPage_Column_Related_List_pageRow" /> 
			from ( select RN, <include refid="gainByPage_Column_Related_List_pageRow" 
			/> from ( select ROWNUM AS RN, <include refid="gainByPage_Column_Related_List_pageRow" 
			/> from( -->


		select
		<include refid="gainByPage_Column_Related_List" />
		,
		<!-- 关联查询购买量 -->
		(select NVL(SUM(i.NUMS), 0) from SJ_TB_ORDER_ITEMS i where
		i.TARGET_ID=g.Id) as buyNums,
		<!-- 关联查询收藏量 -->
		(select count(*) from SJ_TB_Collect ct where ct.TARGET_ID=g.Id and
		ct.TYPE='goods') as ctNums

		from SJ_TB_GOODS g
		left join SJ_TB_GOODS_SKU s on g.ID=s.GOODS_ID and s.SHELVES = 'true'
		left join SJ_TB_COLOR cl on s.color_id = cl.id
		left join SJ_TB_BRAND b on g.BRAND_ID=b.ID
		left join SJ_TB_CAT c on g.CAT_ID=c.ID
		<!-- left join sj_tb_sku_regions_price rp on s.id=rp.goods_sku_id and rp.regions_id=#{area,jdbcType=VARCHAR} and rp.disabled='false' -->
		left join sj_tb_sku_member_price rp on rp.goods_sku_id=s.id and	rp.disabled='false' and rp.MEMBER_ID = #{memberId,jdbcType=VARCHAR}
		where g.id in (
		<include refid="gainByPageIds2" />
		) 

		<!-- 判断sort是否为空，空就按照最高人气排序取数据 传入格式 s.price g.click -->
		<if test="sort!=null and sort!=''">
			order by ${sort} ${orders}
		</if>
		<if test="sort==null or sort == ''">
			<!-- order by (g.CLICK_RATE*#{clickNum} + buyNums*#{buyNum} +
			ctNums*#{collectNum}) ${orders} -->
			order by buyNums
		</if>

		<!-- ) )where <![CDATA[RN <= #{page}*#{rows}]]> ) where RN>(#{page}-1)*#{rows} -->

	</select>

	<!-- 有条件的分页查找商品id列表 -->
	<sql id="gainByPageIds2">
		select id from (
		select RN,id from (
		select ROWNUM AS RN,id from(
		<!-- select id from ( -->
		select g.id,
		g.CLICK_RATE,
		<!-- 综合排序 -->
		<if test="sort==null or sort == ''">
			<!-- sum(
			(select NVL(SUM(i.NUMS), 0) from SJ_TB_ORDER_ITEMS i
			where i.TARGET_ID =
			s.Id)*0.5+g.CLICK_RATE * 0.5+
			(select count(*) from
			SJ_TB_Collect ct where ct.TARGET_ID = s.Id) * 0.2
			)over(partition by
			g.id) zonghe -->
			count(oi.nums) as buyNums
		</if>
		<!-- 价格排序 -->
		<if test="sort!=null and sort!='' and sort=='s.price'">
			min(s.price)over(partition by g.id) price
		</if>
		<!-- 销量排序 -->
		<if test="sort!=null and sort!='' and sort=='buyNums'">
			<!-- (select NVL(SUM(i.NUMS), 0) from SJ_TB_ORDER_ITEMS i where i.TARGET_ID = s.Id) buyNums -->
			count(oi.nums) as buyNums
		</if>
		<!-- 点击量排序click -->
		<if test="sort!=null and sort!='' and sort=='g.CLICK_RATE'">
			sum(g.CLICK_RATE)over(partition by g.id) click
		</if>
		<!-- 时间排序 -->
		<if test="sort!=null and sort!='' and sort=='g.CREATE_TIME'">
			min(g.create_time)over(partition by g.id) createTime
		</if>

		from SJ_TB_GOODS g
		left join SJ_TB_GOODS_SKU s on g.ID=s.GOODS_ID
		left join SJ_TB_COLOR cl on s.color_id = cl.id
		left join SJ_TB_BRAND b on g.BRAND_ID=b.ID
		left join SJ_TB_CAT c on g.CAT_ID=c.ID
		left join sj_tb_order_items oi on oi.target_id=s.id
		left outer join sj_tb_members_goods_show mgs on s.id=mgs.sku_id and mgs.members_id=#{memberId,jdbcType=VARCHAR} and mgs.disabled = 'false'
		<!-- where g.DISABLED ='false' and s.SHELVES = 'true' -->
		<include refid="gainByPageWhere" />

		group by g.id,g.CLICK_RATE
		
		<!-- 价格排序 -->
		<if test="sort!=null and sort!='' and sort=='s.price'">
			, price
		</if>
		<!-- 点击量排序click -->
		<if test="sort!=null and sort!='' and sort=='g.CLICK_RATE'">
			, g.CLICK_RATE
		</if>
		<!-- 时间排序 -->
		<if test="sort!=null and sort!='' and sort=='g.CREATE_TIME'">
			, g.create_time
		</if>

		<!-- 综合排序 -->
		<if test="sort==null or sort == ''">
			order by buyNums ${orders}
		</if>

		<!-- 价格排序 -->
		<!-- <if test="sort!=null and sort!='' and sort!='s.price'"> order by price 
			${orders} </if> -->

		<!-- 价格排序 -->
		<if test="sort!=null and sort!='' and sort=='s.price'">
			order by price ${orders}
		</if>
		<!-- 销量排序 -->
		<if test="sort!=null and sort!='' and sort=='buyNums'">
			
			order by buyNums ${orders}
		</if>
		<!-- 点击量排序click -->
		<if test="sort!=null and sort!='' and sort=='g.CLICK_RATE'">
			order by click ${orders}
		</if> 
		<!-- 时间排序 -->
		<if test="sort!=null and sort!='' and sort=='g.CREATE_TIME'">
			order by createTime ${orders}
		</if>

		<!-- 剩余的就按传过来的排序 -->
		<!-- <if test="sort!=null and sort!=''"> order by ${sort} ${orders} </if> -->

		<!-- )group by id -->
		) )where <![CDATA[RN <= #{page}*#{rows}]]>
		) where RN>(#{page}-1)*#{rows}

	</sql>

	<!-- 有条件的查找商品id列表 -->
	<sql id="gainByPageIds">
		<!-- select id from ( select RN,id from ( select ROWNUM AS RN,id from( -->
		select id from (
		select g.id
		from SJ_TB_GOODS g
		left join SJ_TB_GOODS_SKU
		s on g.ID=s.GOODS_ID
		left join SJ_TB_COLOR cl on s.color_id = cl.id
		left join SJ_TB_BRAND b on g.BRAND_ID=b.ID
		left join SJ_TB_CAT c on
		g.CAT_ID=c.ID

		<include refid="gainByPageWhere" />
		<!-- 判断sort是否为空，空就按照最高人气排序取数据 传入格式 s.price g.click -->
		<!-- 取价格最小的单品，上一级再继续排序 -->
		<!-- 判断sort是否为空，空就按照最高人气排序取数据 传入格式 s.price g.click -->
		<!-- <if test="sort!=null and sort!=''"> order by ${sort} ${orders} </if> 
			<if test="sort==null or sort == ''"> order by (g.CLICK_RATE*#{clickNum} + 
			buyNums*#{buyNum} + ctNums*#{collectNum}) ${orders} </if> -->

		)group by id
		<!-- ) )where <![CDATA[RN <= #{page}*#{rows}]]> ) where RN>(#{page}-1)*#{rows} -->

	</sql>

	<!-- 有条件的分页查找商品列表信息 总数量 -->
	<select id="gainCountNum" parameterType="java.util.Map"
		resultType="java.lang.String">
		select count(*) as countNum from (
		select g.id
		from SJ_TB_GOODS g
		left
		join SJ_TB_GOODS_SKU s on g.ID=s.GOODS_ID
		left join SJ_TB_COLOR cl on
		s.color_id = cl.id
		left join SJ_TB_BRAND b on g.BRAND_ID=b.ID
		left join
		SJ_TB_CAT c on g.CAT_ID=c.ID

		<include refid="gainByPageWhere" />
		group by g.id
		)
	</select>

	<!-- 有条件的分页查找商品列表 where条件 -->
	<sql id="gainByPageWhere">
		where g.DISABLED ='false' and s.SHELVES = 'true' 
		and NOT EXISTs (select * from SJ_TB_SHOPPING_RUSH sr where g.id=sr.GOODS_ID )
		
		<!-- and
	   (select count(goodss.id) from sj_tb_goods_sku goodss where g.id = goodss.goods_id) &gt; 
       (select count(mgs.id)  from sj_tb_members_goods_show mgs
          where mgs.sku_id in (select goodssku.id from sj_tb_goods_sku goodssku where g.id = goodssku.goods_id)
          and mgs.members_id = #{memberId,jdbcType=VARCHAR} and mgs.disabled = 'false') -->

		<!-- 类型 -->
		<if test="catIds!=null and catIds!=''">
			and g.cat_id in
			<foreach collection="catIds" item="catId" open="(" separator=","
				close=")">
				#{catId}
			</foreach>
		</if>
		<!-- 品牌 -->
		<if test="brandIds!=null and brandIds!=''">
			and g.brand_id in
			<foreach collection="brandIds" item="brandId" open="("
				separator="," close=")">
				#{brandId}
			</foreach>
		</if>
		<!-- 屏幕尺寸 -->
		<if
			test="maxScreenSize != null and maxScreenSize != '' or minScreenSize != null and minScreenSize != ''">
			and g.SCREEN_SIZE between #{minScreenSize,jdbcType=DECIMAL} and
			#{maxScreenSize,jdbcType=DECIMAL}
		</if>
		<!-- 运行内存 -->
		<if test="rams != null and rams != ''">
			and g.ram in
			<foreach collection="rams" item="ram" open="(" separator=","
				close=")">
				#{ram}
			</foreach>
		</if>
		<!-- 分辨率 -->
		<if test="resolutions != null and resolutions != ''">
			and g.resolution in
			<foreach collection="resolutions" item="resolution" open="("
				separator="," close=")">
				#{resolution}
			</foreach>
		</if>

		<!-- 模糊查找 -->
		<if test="searchParam != null and searchParam != ''">
			and lower(g.name) like '%${searchParam}%'
		</if>

		<!-- 操作系统 -->
		<if test="operationSystems != null and operationSystems != ''">
			and g.operationSystem in
			<foreach collection="operationSystems" item="operationSystem"
				open="(" separator="," close=")">
				#{operationSystem}
			</foreach>
		</if>
		<!-- 价格 -->
		<if test="minPrice != null and minPrice != ''">
			<if test="maxPrice != null and maxPrice != ''">
				and s.price between #{minPrice,jdbcType=DECIMAL} and
				#{maxPrice,jdbcType=DECIMAL}
			</if>
			<if test="maxPrice == null or maxPrice == ''">
	    		<![CDATA[ and s.price <= #{minPrice,jdbcType=DECIMAL} ]]>
			</if>
		</if>
		<if test="minPrice == null or minPrice == ''">
			<if test="maxPrice != null and maxPrice != ''">
	    		<![CDATA[ and s.price >= #{maxPrice,jdbcType=DECIMAL} ]]>
			</if>
		</if>
		<!-- 网络类型 -->
		<if test="netSuitTypes != null and netSuitTypes != ''">
			and regexp_like(s.net_suit_type,'${netSuitTypes}','i')
		</if>

	</sql>

	<!-- 分页获取配件信息 -->

	<sql id="gain_accessories_Column">

	</sql>
	
	<sql id="gain_accessories_Column_pageRow">
		id,name,goods_num,default_img, cl_color_name, brand_name,
		cat_name , price, stock,spec_code
	</sql>

	<!-- 分页获取配件列表信息 -->
	<select id="gainAccessoriesPage" parameterType="java.util.Map"
		resultMap="gainByPageResultMap">
		select
		<include refid="gain_accessories_Column_pageRow" />
		from (
		select RN,
		<include refid="gain_accessories_Column_pageRow" />
		from (
		select ROWNUM AS RN,
		<include refid="gain_accessories_Column_pageRow" />
		from(select
		g.id,g.name,g.ACCESSORIES_NUM as goods_num,g.default_img,
		g.stock,g.PRICE,g.SPEC_CODE spec_code,
		cl.color_name cl_color_name,
		b.name brand_name,c.name
		cat_name ,
		NVL(SUM(i.NUMS), 0) as buyNums,
        count(ct.id) as ctNums
		from SJ_TB_ACCESSORIES g
		left join SJ_TB_COLOR cl on cl.id=g.color_id
		left join SJ_TB_BRAND b on	g.BRAND_ID=b.ID
		left join SJ_TB_CAT c on g.CAT_ID=c.ID	
		left join SJ_TB_ORDER_ITEMS i on i.TARGET_ID = g.Id
        left join SJ_TB_Collect ct on ct.TARGET_ID = g.Id and ct.TYPE = 'accessories'
		
		where g.DISABLED ='false'
		<if test="catIds!=null and catIds!=''">
			and g.cat_id in
			<foreach collection="catIds" item="catId" open="(" separator=","
				close=")">
				#{catId}
			</foreach>
		</if>
		<!-- 品牌 -->
		<if test="brandIds!=null and brandIds!=''">
			and g.brand_id in
			<foreach collection="brandIds" item="brandId" open="("
				separator="," close=")">
				#{brandId}
			</foreach>
		</if>

		<!-- 模糊查找 -->
		<if test="searchParam != null and searchParam != ''">
			and lower(g.name) like '%${searchParam}%'
		</if>

		<!-- 价格 -->
		<if test="minPrice != null and minPrice != ''">
			<if test="maxPrice != null and maxPrice != ''">
				and g.price between #{minPrice,jdbcType=DECIMAL} and
				#{maxPrice,jdbcType=DECIMAL}
			</if>
			<if test="maxPrice == null or maxPrice == ''">
			    		<![CDATA[ and g.price <= minPrice ]]>
			</if>
		</if>
		<if test="minPrice == null or minPrice == ''">
			<if test="maxPrice != null and maxPrice != ''">
			    		<![CDATA[ and g.price >= maxPrice ]]>
			</if>
		</if>
		group by g.id,g.name, g.ACCESSORIES_NUM, g.default_img, g.stock,g.PRICE,g.SPEC_CODE, cl.color_name ,b.name ,c.name 
		<!-- 判断sort是否为空，空就按照最高人气排序取数据 传入格式 s.price g.click -->
		<if test="sort!=null and sort!=''">
			<if test="sort=='s.price'">
				order by g.price ${orders}
			</if>
			<if test="sort!='s.price'">
				order by ${sort} ${orders}
			</if>
		</if>
		<if test="sort==null or sort == ''">
			<!-- order by (g.CLICK_RATE*#{clickNum} + buyNums*#{buyNum} +
			ctNums*#{collectNum}) ${orders} -->
			order by buyNums
		</if>
		)
		)where <![CDATA[RN <= #{page}*#{rows}]]>
		) where RN>(#{page}-1)*#{rows}
	</select>

	<select id="gainAccessoriesCountNum" parameterType="java.util.Map"
		resultType="java.lang.String">
		select count(*) as countNum from (
		select g.id
		from SJ_TB_ACCESSORIES g
		left join SJ_TB_COLOR cl on cl.id in(g.color_id)
		left join SJ_TB_BRAND
		b on
		g.BRAND_ID=b.ID
		left join SJ_TB_CAT c on g.CAT_ID=c.ID
		where
		g.DISABLED ='false'
		<if test="catIds!=null and catIds!=''">
			and g.cat_id in
			<foreach collection="catIds" item="catId" open="(" separator=","
				close=")">
				#{catId}
			</foreach>
		</if>
		<!-- 品牌 -->
		<if test="brandIds!=null and brandIds!=''">
			and g.brand_id in
			<foreach collection="brandIds" item="brandId" open="("
				separator="," close=")">
				#{brandId}
			</foreach>
		</if>

		<!-- 模糊查找 -->
		<if test="searchParam != null and searchParam != ''">
			and lower(g.name) like '%${searchParam}%'
		</if>

		<!-- 价格 -->
		<if test="minPrice != null and minPrice != ''">
			<if test="maxPrice != null and maxPrice != ''">
				and g.price between #{minPrice,jdbcType=DECIMAL} and
				#{maxPrice,jdbcType=DECIMAL}
			</if>
			<if test="maxPrice == null or maxPrice == ''">
	    		<![CDATA[ and g.price <= minPrice ]]>
			</if>
		</if>
		<if test="minPrice == null or minPrice == ''">
			<if test="maxPrice != null and maxPrice != ''">
	    		<![CDATA[ and g.price >= maxPrice ]]>
			</if>
		</if>
		<!-- 判断sort是否为空，空就按照最高人气排序取数据 传入格式 s.price g.click -->
		<!-- <if test="sort!=null and sort!=''"> <if test="sort=='s.price'"> order 
			by g.price ${order} </if> <if test="sort!='s.price'"> order by ${sort} ${order} 
			</if> </if> -->
		group by g.id
		)
	</select>

	<select id="gainHotByBrandName" resultMap="BaseResultMap">
		select *
		from(select
		t.*,rownum rn from(
		select *
		from (select g.id,
		g.name,
		g.GOODS_NUM,
		sum(gs.stock) over(partition by g.id) stock,
		g.default_img,
		gs.price,
		min(gs.price) over(partition by g.id) minprice
		from sj_tb_goods g
		left
		join sj_tb_brand b on g.brand_id = b.id
		left join sj_tb_goods_sku gs on
		g.id = gs.goods_id
		where g.IS_SELLING_SUPPLIER = 'true'
		and b.name =
		#{brandName})
		where price = minprice
		) t where rownum &lt; #{end})
		where
		rn &gt; #{start}

	</select>
	
</mapper>